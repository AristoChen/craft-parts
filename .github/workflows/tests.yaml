name: Tests

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  linters:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Add local bin to PATH
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Install python packages and dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-venv libapt-pkg-dev
          python3 -m venv ${HOME}/.venv
          source ${HOME}/.venv/bin/activate
          pip install -U pip wheel setuptools
          pip install -U -r requirements.txt -r requirements-dev.txt -r requirements-focal.txt
          pip install -e .
      - name: Run black
        run: |
          source ${HOME}/.venv/bin/activate
          make test-black
      - name: Run codespell
        run: |
          source ${HOME}/.venv/bin/activate
          make test-codespell
      - name: Run flake8
        run: |
          source ${HOME}/.venv/bin/activate
          make test-flake8
      - name: Run isort
        run: |
          source ${HOME}/.venv/bin/activate
          make test-isort
      - name: Run mypy
        run: |
          source ${HOME}/.venv/bin/activate
          make test-mypy
      - name: Run pydocstyle
        run: |
          source ${HOME}/.venv/bin/activate
          make test-pydocstyle
      - name: Run pyright
        run: |
          sudo apt install -y npm
          sudo npm install -g pyright
          source ${HOME}/.venv/bin/activate
          make test-pyright

  tests:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        python-version: [3.7, 3.8]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Add local bin to PATH
        run: |
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip python3-venv libapt-pkg-dev
          python3 -m venv ${HOME}/.venv
          source ${HOME}/.venv/bin/activate
          pip install -U pip wheel setuptools
          case "${{ matrix.os }}" in
            ubuntu-18.04)
              # pip 20.2 breaks python3-apt, so pin the version before building
              pip install pip==20.1
              pip install -U -r requirements-bionic.txt
              ;;
            ubuntu-20.04)
              pip install -U -r requirements-focal.txt
              ;;
          esac
          pip install -U -r requirements.txt -r requirements-dev.txt
          pip install -e .
      - name: Run unit tests
        run: |
          source ${HOME}/.venv/bin/activate
          make test-units
      - name: Run integration tests
        run: |
          source ${HOME}/.venv/bin/activate
          make test-integrations
      - name: Run overlay smoke test
        run: |
          source ${HOME}/.venv/bin/activate
          wget -q https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.squashfs
          mkdir base
          sudo mount -t squashfs focal-server-cloudimg-amd64.squashfs base/
          cat <<-EOF > parts.yaml
          parts:
            foo:
              plugin: nil
              overlay-packages: [hello]
              overlay-script: |
                chroot "\$CRAFT_PARTS_OVERLAY" /bin/bash -c "hello > hello.txt"
                echo 1234 > "\$CRAFT_PARTS_OVERLAY/etc/issue"
              overlay:
                - "*.txt"
                - etc
                - usr/bin
            bar:
              plugin: nil
              after: [foo]
              overlay-packages: [bison]
              overlay-script: |
                chroot "\$CRAFT_PARTS_OVERLAY" /bin/bash -c "rm -Rf /etc/shells /etc/ssh && mkdir /etc/ssh"
                echo 5678 > "\$CRAFT_PARTS_OVERLAY/etc/issue"
              overlay:
                - -usr/share
              override-build: |
                rev "\$CRAFT_PARTS_OVERLAY/hello.txt" > "\$CRAFT_PARTS_PART_INSTALL/olleh.txt"
          EOF
          cat <<-EOF > run.sh
            source ${HOME}/.venv/bin/activate
            echo "--- overlay foo"
            python -mcraft_parts --work-dir=work --trace --overlay-base=base --refresh overlay foo
            echo "--- next actions plan"
            python -mcraft_parts --work-dir=work --overlay-base=base --dry-run --show-skipped
            echo "--- next actions execution"
            python -mcraft_parts --work-dir=work --trace --overlay-base=base
          EOF
          echo "--- parts.yaml:"
          cat parts.yaml
          sudo bash run.sh
          echo "* Check if hello executables installed"
          test -x work/prime/usr/bin/hello && echo "hello"
          test -x work/prime/usr/bin/bison && echo "bison"
          test -x work/prime/usr/bin/m4 && echo "m4"
          echo "* Check if /usr/bin/yacc is a symbolic link"
          test -L work/prime/usr/bin/yacc && ls -l work/prime/usr/bin/yacc
          echo "* Check if docs excluded"
          test ! -d work/usr/share/doc/hello && echo "hello"
          test ! -d work/usr/share/doc/bison && echo "bison"
          echo "* Check created files"
          grep "!dlrow ,olleH" work/prime/olleh.txt
          grep "Hello, world!" work/prime/hello.txt
          grep 5678 work/prime/etc/issue
          echo "* Check whiteout files"
          test -f work/prime/etc/.wh.shells && echo "/etc/shells"
          test -f work/prime/etc/ssh/.wh..wh.opq && echo "/etc/ssh"
          echo "--- prime files:"
          find work/prime
